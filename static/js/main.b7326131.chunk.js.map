{"version":3,"sources":["actions/index.js","components/Nav/Nav.js","components/CharacterCard/CharacterCard.js","components/Query/Query.js","containers/charactersContainer/charactersContainer.js","components/FavoriteCard/FavoriteCard.js","containers/favoritesContainer/favoritesContainer.js","apiCalls/apiCalls.js","components/CharacterLocationCard/CharacterLocationCard.js","containers/characterLocationContainer/characterLocationContainer.js","components/CharacterDetails/CharacterDetails.js","components/404Page/404Page.js","components/App/App.js","reducers/index.js","reducers/charactersInfo.js","reducers/currentCharacter.js","reducers/favorites.js","reducers/currentQuery.js","index.js"],"names":["setCurrentCharactersInfo","currentCharacterInfo","type","updateQuery","characters","Nav","resetQuery","props","charactersList","className","src","alt","to","onClick","this","Component","connect","state","charactersInfo","dispatch","CharacterCard","id","img","name","htmlFor","Query","updateState","event","setState","target","value","findCharacters","searchWord","toLowerCase","characterQueryResults","filter","character","includes","filterStatus","currentState","status","defaultState","filterSpecies","species","searchSection","placeholder","onChange","disabled","filterStatusSection","required","filterSpeciesSection","CharactersContainer","createCharactersList","currentQuery","length","noResultsMessage","updateQueryList","resetSearch","map","key","image","FavoriteCard","removeCharacter","characterId","removeFavoriteCharacter","favorites","removeFavorite","FavoritesContainer","createFavoritesList","favoritesList","favorite","characterInfo","find","getCharacterInfo","a","fetch","then","response","json","CharacterLocationCard","updateCurrentCharacterInfo","currentCharacter","setCharactersInfo","CharacterLocationContainer","updateLocationResidents","undefined","currentCharacterId","characterLocation","location","CharacterDetails","componentDidMount","parseInt","match","data","catch","err","console","log","message","nameCheck","addFavorite","characterID","addToFavorites","toggleFavoriteButton","toggleFavoriteButtonStatus","gender","origin","BadRoute","App","characterListings","characterCount","Array","keys","slice","characterList","forEach","getCharactersInfo","push","path","render","params","exact","component","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b7326131.chunk.js","sourcesContent":["export const getCharactersInfo = (characterInfo) => ({\n  type: \"GET_CHARACTERS_INFO\",\n  characterInfo\n})\n\nexport const setCurrentCharactersInfo = (currentCharacterInfo) => ({\n  type: \"SET_CURRENT_CHARACTERS_INFO\",\n  currentCharacterInfo\n})\n\nexport const addFavorite = (id) => ({\n  type: 'ADD_TO_FAVORITES',\n  id\n})\n\nexport const removeFavorite = (id) => ({\n  type: 'REMOVE_FAVORITES',\n  id\n})\n\nexport const updateQuery = (characters) => ({\n  type: \"UPDATE_QUERY\",\n  characters\n})\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { updateQuery } from '../../actions'\nimport \"./Nav.scss\";\nimport PropTypes from 'prop-types';\n\nclass Nav extends Component {\n\n  resetQuery = () => {\n    this.props.updateQuery(this.props.charactersList)\n  }\n\n  render() {\n    return(\n      <section className=\"nav-section\">\n        <img src=\"https://nothingbutgeek.com/wp-content/uploads/2017/06/RAM_LOGO_FINAL.jpg\" alt=\"rick and morty logo\"/>\n        <Link to={`/rick-and-morty`}>\n          <button onClick={this.resetQuery}>Home</button>\n        </Link>\n        <Link to={`/favorites`}>\n          <button>View Favorites</button>\n        </Link>\n      </section>\n    )\n  }\n}\n\nNav.propTypes = {\n  updateQuery: PropTypes.func,\n  charactersList: PropTypes.array,\n}\n\nconst mapStateToProps = (state) => ({\n  charactersList: state.charactersInfo,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateQuery: characters => dispatch( updateQuery(characters) )\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Nav);\n","import React from 'react';\nimport { Link } from 'react-router-dom'\nimport './CharacterCard.scss'\nimport PropTypes from 'prop-types';\n\nconst CharacterCard = ({ id, img, name }) => {\n  return (\n    <article className='character-card'>\n      <Link to={`/character/${id}`}>\n        <img src={img} alt={\"image of \" + name}/>\n        <label htmlFor=\"charcter-name\">{name}</label>\n      </Link>\n    </article>\n  )\n}\n\nCharacterCard.propTypes = {\n  id: PropTypes.number,\n  img: PropTypes.string,\n  name: PropTypes.string,\n}\n\nexport default CharacterCard;\n","import React, { Component } from 'react';\nimport './Query.scss'\nimport { connect } from 'react-redux';\nimport { updateQuery } from '../../actions';\nimport PropTypes from 'prop-types';\n\nclass Query extends Component {\n  constructor() {\n    super();\n    this.state = {\n      searchWord: '',\n      status: \"default\",\n      species: \"default\"\n    }\n  }\n\n  updateState = (event) => {\n    this.setState({[event.target.name]: event.target.value})\n  }\n\n  findCharacters = () => {\n    const searchWord = this.state.searchWord.toLowerCase()\n    const characterQueryResults = this.props.charactersList\n      .filter(character => character.name.toLowerCase().includes(searchWord))\n    this.props.updateQuery(characterQueryResults)\n    this.setState({searchWord: ''})\n  }\n\n  filterStatus = () => {\n    const currentState = this.state.status.toLowerCase()\n    const filterStatus = this.props.charactersList\n      .filter(character => character.status.toLowerCase() === currentState)\n    this.defaultState(filterStatus)\n  }\n\n  filterSpecies = () => {\n    const currentState = this.state.species.toLowerCase()\n    const filterStatus = this.props.charactersList\n      .filter(character => character.species.toLowerCase() === currentState)\n    this.defaultState(filterStatus)\n  }\n\n  resetQuery = () => {\n    this.props.updateQuery(this.props.charactersList)\n  }\n\n  defaultState = (filterStatus) => {\n    this.props.updateQuery(filterStatus)\n    this.setState({status: \"default\", species: \"default\"})\n  }\n\n  searchSection = () => {\n    return(\n      <section className=\"search-section\">\n        <label htmlFor=\"search-characters\">Search Character:</label>\n        <input\n          name='searchWord'\n          placeholder='Enter Character Name'\n          onChange={this.updateState}\n          value={this.state.searchWord}\n        />\n        <button onClick={this.findCharacters} disabled={this.state.searchWord === ''}>Search</button>\n      </section>\n    )\n  }\n\n  filterStatusSection = () => {\n    return(\n      <section className=\"filter-status\">\n        <label htmlFor=\"filter-status\">Filter Status:</label>\n        <select name=\"status\" value={this.state.status} onChange={this.updateState} required>\n          <option value=\"default\">--Select a Status--</option>\n          <option value=\"alive\">\"Alive\"</option>\n          <option value=\"dead\">\"Dead\"</option>\n          <option value=\"unknown\">\"Unknown\"</option>\n        </select>\n        <button className=\"filter-status-button\" type=\"submit\" onClick={this.filterStatus} disabled={this.state.status === \"default\"}>Filter Status</button>\n      </section>\n    )\n  }\n\n  filterSpeciesSection = () => {\n    return(\n      <section className=\"filter-species\">\n        <label htmlFor=\"filter-species\">Filter Species:</label>\n        <select name=\"species\" value={this.state.species} onChange={this.updateState} required>\n          <option value=\"default\">--Select a Species--</option>\n          <option value=\"Alien\">\"Alien\"</option>\n          <option value=\"Animal\">\"Animal\"</option>\n          <option value=\"Cronenberg\">\"Cronenberg\"</option>\n          <option value=\"Disease\">\"Disease\"</option>\n          <option value=\"Human\">\"Human\"</option>\n          <option value=\"Humanoid\">\"Humanoid\"</option>\n          <option value=\"Mytholog\">\"Mytholog\"</option>\n          <option value=\"Parasite\">\"Parasite\"</option>\n          <option value=\"Poopybutthole\">\"Poopybutthole\"</option>\n          <option value=\"Robot\">\"Robot\"</option>\n          <option value=\"Vampire\">\"Vampire\"</option>\n          <option value=\"Unknown\">\"Unknown\"</option>\n        </select>\n        <button className=\"filter-species-button\" type=\"submit\" onClick={this.filterSpecies} disabled={this.state.species === \"default\"}>Filter Species</button>\n      </section>\n    )\n  }\n\n  render() {\n    return (\n      <section className=\"query-section\">\n        {this.searchSection()}\n        {this.filterStatusSection()}\n        {this.filterSpeciesSection()}\n        <section>\n          <button className=\"reset-button\" onClick={this.resetQuery}>Reset Results</button>\n        </section>\n      </section>\n    )\n  }\n}\n\nQuery.propTypes = {\n  updateQuery: PropTypes.func,\n  charactersList: PropTypes.array,\n}\n\nconst mapStateToProps = (state) => ({\n  charactersList: state.charactersInfo,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateQuery: characters => dispatch( updateQuery(characters) )\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Query);\n","import React, { Component } from 'react';\nimport CharacterCard from '../../components/CharacterCard/CharacterCard';\nimport Query from '../../components/Query/Query';\nimport { connect } from 'react-redux';\nimport './charactersContainer.scss';\nimport { updateQuery } from '../../actions';\nimport PropTypes from 'prop-types';\n\n\nclass CharactersContainer extends Component {\n\n  createCharactersList = () => {\n    const currentQuery = this.props.currentQuery;\n    return currentQuery.length === 0 ?\n      (this.noResultsMessage()) : this.updateQueryList();\n  }\n\n  resetSearch = () => {\n    this.props.updateQuery(this.props.charactersList)\n  }\n\n  noResultsMessage = () => {\n    return (\n      <section className=\"no-results\">\n        <h2>There are no results</h2>\n        <button onClick={this.resetSearch}>Reset Search</button>\n      </section>\n    )\n  }\n\n  updateQueryList = () => {\n    return this.props.currentQuery.map(character => {\n      return (\n        <CharacterCard\n        id={character.id}\n        key={character.id}\n        img={character.image}\n        name={character.name}\n        />\n      )\n    })\n  }\n\n  render() {\n    return (\n      <section className=\"main-page\">\n        <section>\n          <Query />\n        </section>\n        <section className=\"characters-section\">\n        <h1>Characters</h1>\n          <section className='characters-container'>\n          {this.createCharactersList()}\n          </section>\n        </section>\n      </section>\n    )\n  }\n}\n\nCharactersContainer.propTypes = {\n  charactersList: PropTypes.array,\n  currentQuery: PropTypes.array,\n  updateQuery: PropTypes.func,\n}\n\nconst mapStateToProps = (state) => ({\n  charactersList: state.charactersInfo,\n  currentQuery: state.currentQuery\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateQuery: characters => dispatch( updateQuery(characters) )\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CharactersContainer);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport './FavoriteCard.scss';\nimport { Link } from 'react-router-dom';\nimport { removeFavorite } from '../../actions';\nimport PropTypes from 'prop-types';\n\nclass FavoriteCard extends Component {\n\n  removeCharacter = () => {\n    const characterId = this.props.id\n    this.props.removeFavoriteCharacter(characterId)\n  }\n\n  render() {\n    const { id, name, image } = this.props\n\n    return (\n      <article className=\"favorite-card\">\n        <section>\n          <img src={image} alt={\"image of \" + name}/>\n          <h1>{name}</h1>\n        </section>\n        <section>\n          <Link to={`/character/${id}`}>\n            <button>View Details</button>\n          </Link>\n          <button onClick={this.removeCharacter}>Remove Favorite</button>\n        </section>\n      </article>\n    )\n  }\n}\n\nFavoriteCard.propTypes = {\n  removeFavoriteCharacter: PropTypes.func,\n  charactersInfo: PropTypes.array,\n  favorites: PropTypes.array,\n  id: PropTypes.number,\n  name: PropTypes.string,\n  image: PropTypes.string,\n}\n\nconst mapStateToProps = (state) => ({\n  charactersInfo: state.charactersInfo,\n  favorites: state.favorites\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  removeFavoriteCharacter: id => dispatch( removeFavorite(id) )\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FavoriteCard);\n","import React, { Component } from 'react';\nimport FavoriteCard from '../../components/FavoriteCard/FavoriteCard'\nimport { connect } from 'react-redux';\nimport './favoritesContainer.scss';\nimport PropTypes from 'prop-types';\n\nclass FavoritesContainer extends Component {\n\n  createFavoritesList = () => {\n    const checkFavorites = this.props.favorites;\n\n    return checkFavorites.length === 0 ? (<h1>There are no favorites!</h1>) : this.favoritesList()\n  }\n\n  favoritesList = () => {\n    return this.props.favorites.map(favorite => {\n      const characterInfo = this.props.charactersInfo.find(character => character.id === favorite.id)\n\n      return (\n        <FavoriteCard\n        key={characterInfo.id}\n        id={characterInfo.id}\n        name={characterInfo.name}\n        image={characterInfo.image}\n        />\n      )\n    })\n  }\n\n  render() {\n    return(\n      <section className=\"favorites-container\">\n        {this.createFavoritesList()}\n      </section>\n    )\n  }\n}\n\nFavoritesContainer.propTypes = {\n  charactersInfo: PropTypes.array,\n  favorites: PropTypes.array,\n}\n\nconst mapStateToProps = (state) => ({\n  charactersInfo: state.charactersInfo,\n  favorites: state.favorites\n})\n\nexport default connect(mapStateToProps, null)(FavoritesContainer);\n","const BASE_URL = 'https://rickandmortyapi.com/api/character/';\n\nexport const getCharacterInfo = async (character) => {\n  return await fetch(BASE_URL + character)\n    .then(response => response.json())\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\nimport './CharacterLocationCard.scss'\nimport { connect } from 'react-redux';\nimport { setCurrentCharactersInfo} from '../../actions';\nimport PropTypes from 'prop-types';\n\nclass CharacterLocationCard extends Component {\n\n  updateCurrentCharacterInfo = () => {\n    const currentCharacter = this.props.charactersInfo.find(character => character.id === this.props.id);\n    this.props.setCharactersInfo(currentCharacter)\n  }\n\n  render() {\n    const { id, name, image } = this.props\n\n    return (\n      <article className='character-location-card'>\n        <Link to={`/character/${id}`}>\n          <img src={image} alt={\"image of \" + name} onClick={this.updateCurrentCharacterInfo}/>\n        </Link>\n      </article>\n    )\n  }\n}\n\nCharacterLocationCard.propTypes = {\n  setCharactersInfo: PropTypes.func,\n  charactersInfo: PropTypes.array,\n  id: PropTypes.number,\n  name: PropTypes.string,\n  image: PropTypes.string,\n}\n\nconst mapStateToProps = (state) => ({\n  charactersInfo: state.charactersInfo,\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  setCharactersInfo: charactersInfo => dispatch( setCurrentCharactersInfo(charactersInfo) ),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps) (CharacterLocationCard);\n","import React, { Component } from 'react';\nimport CharacterLocationCard from '../../components/CharacterLocationCard/CharacterLocationCard'\nimport { connect } from 'react-redux';\nimport './characterLocationContainer.scss';\nimport PropTypes from 'prop-types';\n\nclass CharacterLocationContainer extends Component {\n\n  updateLocationResidents = () => {\n    if(this.props.currentCharacter.id === undefined) {\n      return ''\n    } else {\n      const currentCharacterId = this.props.currentCharacter.id;\n      const characterLocation = this.props.currentCharacter.location.name;\n      const filterCharactersMatchingLocations = this.props.charactersInfo\n        .filter(character => character.location.name === characterLocation)\n      const removedCurrentCharacterQuery = filterCharactersMatchingLocations\n        .filter(character => character.id !== currentCharacterId)\n\n      return(\n        removedCurrentCharacterQuery.map(character => {\n          return <CharacterLocationCard\n          id={character.id}\n          key={character.id}\n          name={character.name}\n          image={character.image}/>\n        })\n      )\n    }\n  }\n\n  render() {\n    return (\n      <section className=\"character-location-container\">\n        {this.updateLocationResidents()}\n      </section>\n    )\n  }\n}\n\nCharacterLocationContainer.propTypes = {\n  charactersInfo: PropTypes.array,\n  currentCharacter: PropTypes.object,\n}\n\nconst mapStateToProps = (state) => ({\n  charactersInfo: state.charactersInfo,\n  currentCharacter: state.currentCharacter,\n})\n\nexport default connect(mapStateToProps, null)(CharacterLocationContainer);\n","import React, { Component } from 'react';\nimport './CharacterDetails.scss'\nimport { connect } from 'react-redux';\nimport { setCurrentCharactersInfo, addFavorite } from '../../actions';\nimport { getCharacterInfo } from '../../apiCalls/apiCalls'\nimport CharacterLocationContainer from '../../containers/characterLocationContainer/characterLocationContainer'\nimport PropTypes from 'prop-types';\n\nclass CharacterDetails extends Component {\n\n  componentDidMount = () => {\n    const characterId = parseInt(this.props.match);\n    this.updateCurrentCharacterInfo(characterId)\n  }\n\n  updateCurrentCharacterInfo = (id) => {\n    getCharacterInfo(id)\n      .then(data => this.props.setCharactersInfo(data))\n      .catch(err => console.log(err.message))\n  }\n\n  nameCheck = (type) => {\n    return type === undefined ? \"\" : type[\"name\"]\n  }\n\n  addFavorite = () => {\n    const characterID = this.props.currentCharacterInfo.id\n    this.props.addToFavorites(characterID)\n  }\n\n  toggleFavoriteButton = () => {\n    const characterID = this.props.currentCharacterInfo.id\n    const favoriteCheck = this.props.favorites.find(character => character.id === characterID);\n\n    return !favoriteCheck ? false : true\n  }\n\n  toggleFavoriteButtonStatus = () => {\n    const characterID = this.props.currentCharacterInfo.id\n    const favoriteCheck = this.props.favorites.find(character => character.id === characterID);\n\n    return !favoriteCheck ? \"Add to Favorites\" : \"Already Favorited!\"\n  }\n\n  render() {\n    const { name, status, species, gender, origin, location, image } = this.props.currentCharacterInfo;\n\n    return (\n      <section className=\"character-main\">\n        <section className=\"character-details\">\n          <section>\n            <img src={image} alt={\"image of \" + name}/>\n          </section>\n          <section>\n            <h1>{name}</h1>\n            <section>\n              <div>Status: <span>{status}</span></div>\n              <div>Species: <span>{species}</span></div>\n              <div>Gender: <span>{gender}</span></div>\n              <div>Origin: <span>{this.nameCheck(origin)}</span></div>\n              <div>Location: <span>{this.nameCheck(location)}</span></div>\n            </section>\n            <button onClick={this.addFavorite} disabled={this.toggleFavoriteButton()}>{this.toggleFavoriteButtonStatus()}</button>\n          </section>\n        </section>\n        <section className=\"location-container\">\n          <h2>More Characters From The: \"{this.nameCheck(location)}\"</h2>\n          <div><CharacterLocationContainer /></div>\n        </section>\n      </section>\n    )\n  }\n}\n\nCharacterDetails.propTypes = {\n  setCharactersInfo: PropTypes.func,\n  addToFavorites: PropTypes.func,\n  charactersInfo: PropTypes.array,\n  currentCharacterInfo: PropTypes.object,\n  favorites: PropTypes.array,\n  name: PropTypes.string,\n  status: PropTypes.string,\n  species: PropTypes.string,\n  gender: PropTypes.string,\n  origin: PropTypes.object,\n  location: PropTypes.object,\n  image: PropTypes.string,\n}\n\nconst mapStateToProps = (state) => ({\n  charactersInfo: state.charactersInfo,\n  currentCharacterInfo: state.currentCharacter,\n  favorites: state.favorites\n})\n\nconst mapDispatchToProps = (dispatch) => ({\n  setCharactersInfo: charactersInfo => dispatch( setCurrentCharactersInfo(charactersInfo) ),\n  addToFavorites: id => dispatch( addFavorite(id) )\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps) (CharacterDetails);\n","import React from 'react';\nimport { Link } from 'react-router-dom'\nimport './404Page.scss'\n\nconst BadRoute = () => {\n  return (\n    <article className='bad-route-page'>\n      <h1>Looks Like You Are Lost!</h1>\n      <Link to={`/rick-and-morty`}>\n        <button>Go To Home Page</button>\n      </Link>\n    </article>\n  )\n}\n\nexport default BadRoute;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { getCharactersInfo, updateQuery } from '../../actions'\nimport './App.scss';\nimport { Route, Switch } from 'react-router-dom';\nimport Nav from '../Nav/Nav'\nimport CharactersContainer from '../../containers/charactersContainer/charactersContainer'\nimport FavoritesContainer from '../../containers/favoritesContainer/favoritesContainer'\nimport CharacterDetails from '../CharacterDetails/CharacterDetails'\nimport BadRoute from '../404Page/404Page'\nimport { getCharacterInfo } from '../../apiCalls/apiCalls'\nimport PropTypes from 'prop-types';\n\nclass App extends Component {\n\n  componentDidMount = () => {\n    this.characterListings();\n  }\n\n  characterListings = () => {\n    let characterCount = [...Array(581).keys()].slice(1);\n    let characterList = []\n\n    characterCount.forEach(character => {\n      getCharacterInfo(character)\n        .then(data => {\n          this.props.getCharactersInfo(data);\n          characterList.push(data)\n        })\n        .catch(err => console.log(err.message))\n    })\n\n    this.props.updateQuery(characterList)\n  }\n\n  render() {\n    return(\n      <main>\n        <Nav />\n        <Switch>\n          <Route\n          path='/character/:id'\n          render={({ match }) => {\n            return <CharacterDetails\n            match={match.params.id}\n            />\n          }}\n          />\n          <Route\n          path='/favorites'\n          render={() => (\n            <FavoritesContainer />\n          )}\n          />\n          <Route\n            path='/rick-and-morty'\n            render={() => (\n              <CharactersContainer />\n            )}\n          />\n          <Route\n            exact\n            path='/'\n            render={() => (\n              <CharactersContainer />\n            )}\n          />\n          <Route\n            path='*'\n            component={BadRoute}\n          />\n        </Switch>\n      </main>\n    )\n  }\n}\n\nApp.propTypes = {\n  getCharactersInfo: PropTypes.func,\n  updateQuery: PropTypes.func,\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  getCharactersInfo: charactersInfo => dispatch( getCharactersInfo(charactersInfo) ),\n  updateQuery: characters => dispatch( updateQuery(characters) )\n})\n\nexport default connect(null, mapDispatchToProps)(App);\n","import { combineReducers } from 'redux';\nimport { charactersInfo } from './charactersInfo';\nimport { currentCharacter } from './currentCharacter';\nimport { favorites } from './favorites';\nimport { currentQuery } from './currentQuery';\n\nexport const rootReducer = combineReducers({\n  charactersInfo,\n  currentCharacter,\n  favorites,\n  currentQuery\n})\n","export const charactersInfo = (state = [], action) => {\n  switch(action.type) {\n    case 'GET_CHARACTERS_INFO':\n      return [...state, action.characterInfo]\n    default:\n      return state;\n  }\n}\n","export const currentCharacter = (state = {}, action) => {\n  switch(action.type) {\n    case 'SET_CURRENT_CHARACTERS_INFO':\n      return action.currentCharacterInfo\n    default:\n      return state;\n  }\n}\n","export const favorites = (state = [], action) => {\n  switch(action.type) {\n    case 'ADD_TO_FAVORITES':\n      return [...state, {id: action.id}];\n    case 'REMOVE_FAVORITES':\n      return state.filter(character => character.id !== action.id);\n    default:\n      return state;\n  }\n}\n","export const currentQuery = (state = [], action) => {\n  switch(action.type) {\n    case 'UPDATE_QUERY':\n      return action.characters\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App/App';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { rootReducer } from './reducers';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}